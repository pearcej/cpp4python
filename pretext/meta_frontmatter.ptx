<?xml version="1.0" encoding="UTF-8"?>
<!-- This frontmatter division contains all content before the -->
<!-- first chapter.  -->
<frontmatter xmlns:xi="http://www.w3.org/2001/XInclude" xml:id="meta_frontmatter">

  <bibinfo>
    <author>
      <personname>Dr. Jan Pearce</personname>
      <department>Computer Science</department>
      <institution>Berea College</institution>
    </author>
    <date><today/></date>
    <copyright>
    <!-- In addition to specifying the copyright holder, you should  -->
      <!-- include a license, such as the cc-by-sa license shown below -->
      <!-- so people reading your book know how they can use it.       -->
      <year>2022<ndash/>2023</year>
      <holder>Dr. Jan Pearce</holder>
      <!-- <minilicense><image source="../images/by-sa.png" /></minilicense> -->
      <shortlicense>
        <image source="cc-image.png" width="25%">
          <description>CC BY-SA 4.0</description>
        </image>
        <p>
        </p>
        <!-- <image source="../images/by-sa.png" width="15%"/>  -->
        This work is licensed under the open source Creative Commons Attribution-ShareAlike 4.0 International License. To view a copy of this license, visit
        <url 
          href="https://creativecommons.org/licenses/by-sa/4.0/legalcode"
          visual="creativecommons.org/licenses/by-sa/4.0/legalcode">
          CC BY-SA 4.0
        </url>
        For a human readable summary see <url href="https://creativecommons.org/licenses/by-sa/4.0/" visual="creativecommons.org/licenses/by-sa/4.0/">CC-BY-SA 4.0 Summary</url>.
      </shortlicense>
    </copyright>
    </bibinfo>

  <titlepage>
    <titlepage-items/>
  </titlepage>

  <colophon>
    <title>Open Source Licensing</title>
    <colophon-items/>
  </colophon>
  <!--     <website>
      <name><c>my-website.org</c></name>
      <address>http://pretextbook.org</address>
    </website> -->

  <dedication>
    <p>
      For everyone who wants to learn to contribute to open source projects.
    </p>
  </dedication>

  <acknowledgement>
    <p>
      I would like to thank <url href="https://www.berea.edu" visual="www.berea.edu">Berea College</url> for sabbatical leave support that gave me time and made this work possible. 
      I am also grateful to the software innovation lab <url href="https://www.tweag.io" visual="tweag.io">Tweag</url> for financial support and the time, recommendations, and patience of my open source mentors, Michael Gale and Georgios Karachalias whose perspectives, backgrounds, and suggestions have served to significantly improve this work.
    </p>
    <p>
      The Berea College students Eren Gul, Nega Demeke, Thao Pham, and Nelson Xunic
      served as the first student readers of this work and helped to make this work more understandable. I am grateful for all of their time and efforts.
    </p>
    <p>
      I am grateful to Heidi Ellis for her support for this project and her help in locating resources such as <url href="https://quaid.fedorapeople.org/TOS/Practical_Open_Source_Software_Exploration/html/" visual="quaid.fedorapeople.org/TOS/Practical_Open_Source_Software_Exploration/html">Teaching Open Source</url>.
      
      Several parts of this textbook including the <xref ref="meta_frontmatter-preface" text="title"/>, <xref ref="meta_frontmatter-forward" text="title"/> and numerous portions of <xref ref="ch_intro_oss"/>, <xref ref="ch_community"/>, and <xref ref="ch_documentation"/> are modified from Karsten Wade's site <url href="https://quaid.fedorapeople.org/TOS/Practical_Open_Source_Software_Exploration/html/" visual="quaid.fedorapeople.org/TOS/Practical_Open_Source_Software_Exploration/html">Teaching Open Source</url>. Many thanks to the authors Greg DeKoenigsberg, Chris Tyler, Karsten Wade, Max Spevack, Mel Chua, and Jeff Sheltren for releasing this work under the open source  license <url href="http://creativecommons.org/licenses/by-sa/3.0/" visual="creativecommons.org/licenses/by-sa/3.0">Creative Commons Attribution–Share Alike 3.0 Unported license ("CC-BY-SA")</url> which is listed as compatible with <url href="https://creativecommons.org/licenses/by-sa/4.0/" visual="creativecommons.org/licenses/by-sa/4.0/">CC-BY-SA 4.0</url>. See <url href="https://creativecommons.org/share-your-work/licensing-considerations/compatible-licenses" visual="creativecommons.org/share-your-work/licensing-considerations/compatible-licenses">Creative Commons Compatible Licenses</url> where it states, "your contributions to adaptations of BY-SA 3.0 materials may only be licensed under: BY-SA 3.0, or <em>a later version of the BY-SA license</em>." (Emphasis added for clarity.)
    </p>
    <p>
      With the exception of <xref ref="sec_licensing_about"/> which is original, nearly all of <xref ref="ch_licensing"/> is modified from <url href="https://choosealicense.com/" visual="choosealicense.com">Choose a License</url>, which is curated by <url href="https://github.com/" visual="github.com">GitHub</url>. Many thanks to GitHub for all that they do for the open source community and for releasing this work under  the <url href="https://creativecommons.org/licenses/by/3.0/" visual="creativecommons.org/licenses/by/3.0">Creative Commons Attribution 3.0 Unported License</url>, which, as noted in the previous paragraph, is compatible with the licensing of this text.
    </p>
    <p>
      Although <xref ref="ch_dev_env"/> is entirely original, I am indebted to Michael Gale and Georgios Karachalias both for the idea of the chapter as well as for their many substantive suggestions for improvements.
    </p>

    <p>
      Nearly all of <xref ref="ch_git"/> is abridged and modified from the Second edition of <url href="https://git-scm.com/book/en/v2/" visual="git-scm.com/book/en/v2/">Pro Git</url> which is licensed under the <url href="https://creativecommons.org/licenses/by-nc-sa/3.0/" visual="creativecommons.org/licenses/by-nc-sa/3.0/">Creative Commons Attribution Non Commercial Share Alike 3.0 license</url>. Many thanks to the authors, Scott Chacon and Ben Straub for making such a tremendous resource available to the open source community. 
    </p>

    <p>
      I would like to thank Rob Beezer for the creation of <url href="https://pretextbook.org/" visual="pretextbook.org">PreTeXt</url> which is the authoring platform of this text and for his amazing level of responsiveness in the PreTeXt support channel. I would also like to thank David Farmer for his help in the PreText support channels. Additionally, I am very grateful for Oscar Levin's work in the creation of PreText converter for <url href="https://pandoc.org/" visual="pandoc.org">Pandoc</url> which made adaption of other open source materials much less time consuming.
      </p>

      <p>
      Brad Miller deserves a hearty thanks for his work in creating <url href="https://runestone.academy/" visual="runestone.academy">Runestone Academy</url> where this book is hosted, and for his collaborative work with the <url href="https://pretextbook.org/" visual="pretextbook.org">PreTeXt</url> authoring group.
    </p>
    <p>
      Finally, I would like to thank my husband, Bob Fairchild, for his patience and for his cooking as I endeavored to create this book.
    </p>
  </acknowledgement>

  <preface xml:id="meta_frontmatter-preface">
  <!-- You should be a little careful about what you put here -->
    <!-- Avoid elements that should have a number, for example  -->
    <p>
      This textbook is designed for instructors, formal students, and self-learners. It explains what open source software is and teaches the basic skills of open source development incrementally, through real involvement in meaningful projects.
    </p>
  </preface>
  <!-- Note: You can have more than one preface. -->

  <preface xml:id="meta_frontmatter-forward">
    <title>Forward</title>

      <paragraphs xml:id="why-necessary">
        <title>Why is This Book Necessary?</title>
      <p>
      <em>Note that other than making minor corrections, this Forward is unchanged from the original forward for <url href="https://quaid.fedorapeople.org/TOS/Practical_Open_Source_Software_Exploration/html/" visual="quaid.fedorapeople.org/TOS/Practical_Open_Source_Software_Exploration/html">Teaching Open Source</url> by Greg DeKoenigsberg, Chris Tyler, Karsten Wade, Max Spevack, Mel Chua, and Jeff Sheltren. These authors have not been involved in the creation of this text, but the stated purpose is exactly the same.</em> 
      </p>
      <p>

      </p>
      <p>
        In March 2006, David A. Patterson wrote an article entitled “Computer science education in the 21st century.” David A. Patterson was, at the time, the president of the Association for Computer Machinery, the world’s largest educational and scientific computing society. In this article — which, sadly, you cannot read unless you are an ACM member — he advocated for fundamental changes to how computer science is taught. One of the changes to the standard undergraduate computer science curriculum that he advocated for was the inclusion of courses in open source software development.
      </p>
      <p>
        One might think that such a clarion call, made by someone of such obvious influence, would generate a groundswell of enthusiasm. When the president of the ACM proclaims that it is “time to teach open source development,” the world of academia must certainly follow, yes?
      </p>
      <p>
        It's a little more complicated than that.
      </p>
      <p>
        We've spent a lot of time over the past few years talking to computer science professors. Mostly we’ve asked lots of questions — actually, the same ones over and over.
      </p>
      <p>
        <line>Do you use open source software in your classes? (Increasingly.)</line>
        <line>Are your students interested in open source? (Increasingly.)</line>
        <line>Do you or your students participate in open source software? (Rarely.)</line>
        <line>Do you teach open source development practices? (Almost never.)</line>
        <line>For these last two, the follow-up question is, invariably, “why not?”</line>
        </p>
      <p>
        And the answer is, invariably, “because it’s hard.”
      </p>
      <p>
        There are good reasons why professors don’t teach the practice of open source. It’s easy for open source advocates to explain away these reasons. At a certain point, though, one must accept the idea that most professors are well-intentioned, but bound by circumstances that make it frustratingly difficult to introduce students to open source development.
      </p>
      <p>
        So why bother?
      </p>
      <p>
        The answer is simple: the skills required to succeed in an open source software project are the exact same skills required to succeed in any large software project. The biggest difference is that, with just a bit of guidance, anyone can build their software skills in the open source world.
      </p>
      <p>
        We hope that this textbook helps provide that guidance to a whole generation of students.
      </p>
    </paragraphs>

    <paragraphs xml:id="why-ineffective">
      <title>Why Traditional Student Projects Are Ineffective</title>
      <p>
      </p>
      <p>
        Almost every modern computer science degree program requires students to complete a big project. Sometimes it’s the “Senior Project,” and sometimes it’s the “Capstone Project.” Whatever it’s called, the purpose of this big project is to expose students to “real” software engineering practices.
      </p>
      <p>
        In other words, this typically translates to “coding with other people.” Unfortunately, up until this point in a student’s education, this has usually been discouraged as “cheating.”
      </p>
      <p>
        The problem is that these big projects actually tend to focus on extremely bounded problems. Most of the time, a small team of students works on a small project for a semester, and the result is, quite naturally, a small project. While good learning can take place in a small project, it actually does very little to prepare students to work on really big projects.
      </p>
      <p>
        To find really big projects, one must venture out into the world, where there are really big problems. The real world is full of gigantic applications that require build systems and revision control and defect tracking and prioritization of work. They are written in languages that one may or may not know, by people one may or may not ever meet. And in order to successfully navigate through these really big projects, the novice developer must possess one skill above all others: the ability, in the words of our colleague David Humphrey, to be “productively lost.”
      </p>
      <p>
        The great advantage of open source, for the learner, is that the really big projects of the open source world provide unparalleled opportunities to be productively lost. Complex code bases are immediately accessible by anyone who wants to participate. This accessibility is crucial to the learner, as participating in an activity is by far the most effective way to learn that activity.
      </p>
      <p>
        Sooner or later, the coder aspirant must work at scale, with teammates. Open source provides that opportunity in a way that nothing else can.
      </p>
        
    </paragraphs>

    <paragraphs xml:id="why-using-this-textbook">
      <title> Using This Book to Get Started</title>  
      <p>
      </p>
      <p>
        This book exists because professors asked for it, but this book’s fundamental approach — teaching the basic skills of open source development incrementally, through real involvement in meaningful projects — should make it suitable for self-learners as well. Regardless of whether you are using this text as part of a course or working with it on your own, you should work through it while adhering to the principles of contributing, calling for help, and being bold.
      </p>
      <p>
        First, always be contributing. The majority of exercises in this book are designed to lead to direct and useful contributions to a project, no matter how small. Even a simple act, such as adding comments to a part of the code you don’t understand, can add real value to a project; that’s the great thing about community developed software. Contribution matters, and legitimate contributions, no matter how small, are welcome in many projects.
      </p>
      <p>
        Second, ask for help when you’re stuck. If you have trouble with an exercise — and at some point you will — look to your fellow contributors for help. Your chosen project likely has mechanisms for getting in touch with the more advanced developers: mailing lists, IRC channels, Slack channels, Discord channels, forums, or more than one of the above. Communicating with those around you is not only “not cheating,” it’s key to establishing greater understanding. Keep this in mind, though: in the real world, people are most likely to help those who are trying to help themselves. Before you ask someone a question of more senior developers, ask the same question of Google. A good rule of thumb: if you can’t figure something out in 15 minutes of searching the Internet, it’s reasonable to ask for a bit of help.
      </p>
      <p>
        And third, be bold. Try things. Break stuff. Don’t be afraid to play around with your own copy of the code; it’s only code, after all, and if you break something, you can always revert to the previous version. If you reach a point at which you think you’re ready to make a contribution of some kind, then offer to help on the project's preferred communication channel. The answer will usually be “go ahead, thanks!” Sometimes the offer will be “no thanks, and here’s why,” and you’ll learn something. Occasionally the answer will be “no, go away,” which is also useful, since it tells you to invest your energies into another project. Sometimes the answer may be silence; don’t be afraid to keep asking until you get an answer, or even plunge ahead without one. Learn the rules of the project and follow them; if the rules of the project are vague or confusing, you can help to make them clearer. This alone can be a critical contribution, as it clearly helps those who come along after you.
      </p>
      <p>
        In most educational contexts, you have likely been “trained” to wait for permission before doing anything not previously specified, but you must avoid letting that get in the way of your progress when engaging with an open source project. When the rules are unclear, don’t sit on your hands. Do your best to help the project. It’s better to do something wrong, and learn from it, than to do nothing at all.
      </p>
    </paragraphs>

  </preface>
</frontmatter>
