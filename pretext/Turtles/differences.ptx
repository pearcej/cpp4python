<?xml version="1.0"?>
<section xml:id="turtles_python-s-turtle-vs-c-turtle">
  <title>Python's turtle vs C-Turtle</title>
  <p><c classes="code">C-Turtle</c> varies from the Python <c classes="code">turtle</c> library primarily in syntax. Most of the methods
            are exactly the same between implementations, however there are a few notable differences between the two.
            Colors, for example, must be surrounded by curly brackets (e.g, &#x2018;{' and &#x2018;}') when referring to them by a
            name such as <q>red</q>, <q>green</q>, or <q>blue</q>. You can also ask for a random color by using the string <q>random</q>.</p>
  <program language="cpp">
    <input>
ct::Color red   = {"red"};
ct::Color green = {"green"};
ct::Color blue  = {"blue"};
ct::Color random = {"random"};

//This works due to the variable above...
turtle.pencolor(red);

//And so do these.
turtle.pencolor({"green"});
turtle.pencolor({"random"});
</input>
  </program>
  <p>Unlike in Python, the <c classes="code">write</c> method does not allow you to specify a font nor size. This is due to the complex handling
            and of Fonts by operating systems that is far more cumbersome to manage in C++. Furthermore, there is no <q>world</q> screen mode like
            there is in Python. Normally, this would allow you to specify the <q>bounds</q> of your canvas (e.g, specify minimum
            and maximum coordinates for your canvas).</p>
  <p>Default shapes are also different and somewhat limited in comparison. Python offers six shapes by default, being <q>arrow</q>, <q>circle</q>,
            <q>turtle</q>, <q>square</q>, <q>triangle</q>, and <q>classic</q>. <c classes="code">C-Turtle</c>, on the other hand, offers four shapes by default: <q>arrow</q>, <q>triangle</q>,
            <q>indented triangle</q>, and <q>square</q>.</p>
  <p>There are a few utility methods available in <c classes="code">C-Turtle</c> that are not available in Python, such as <c classes="code">shift</c> and <c classes="code">middle</c>.
            The former of the two, <c classes="code">shift</c>, simply adds to the X and Y coordinate position of the turtle. If your turtle is at coordinate
            600x, 400y and <c classes="code">shift</c> is called with coordinate 50x and -50y, the turtle's final position would be 650x, 350y. The latter
            of the two, <c classes="code">middle</c>, returns the point exactly between two other points. See the examples below.</p>
  <program language="cpp">
    <input>
turtle.goTo(600, 400);
turtle.shift(50, -50);
//Turtle position is now 650x, 350y.
</input>
  </program>
  <program language="cpp">
    <input>
ct::Point a = {400, 300};
ct::Point b = {450, 300};

//Should equal the point 425x, 300y.
ct::Point middle = ct::middle(a, b);
</input>
  </program>
</section>
