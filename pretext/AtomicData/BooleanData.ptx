<?xml version="1.0"?>
<section xml:id="atomic-data_boolean-data">
  <title>Boolean Data</title>
  <p>Boolean data types are named after George Boole who was an English mathematician,
            so the word <q>Boolean</q> should be capitalized. However,
            the Boolean data type, in C++ uses the keyword <c>bool</c>
            which is not capitalized.
            The possible state values
            for a C++ Boolean are lower case <c>true</c> and <c>false</c>.
            Be sure to note the difference in capitalization from Python.
            In Python, these same truth values are capitalized, while in C++,
            they are lower case.</p>
  <p>C++ uses the standard Boolean operators, but they are represented
            differently than in Python: <q>and</q> is given by <c>&amp;&amp;</c> , <q>or</q> is given by <c>||</c>
            , and <q>not</q> is given by <c>!</c>.
            Note that the internally stored values representing <c>true</c> and <c>false</c>
            are actually <c>1</c> and <c>0</c> respectively. Hence, we see this in output as well.</p>
  <exercise>
    <TabNode tabname="C++" tabnode_options="{'subchapter': 'BooleanData', 'chapter': 'AtomicData', 'basecourse': 'cpp4python', 'optional': '', 'optclass': '', 'tabname': 'C++'}">
      <program xml:id="logical_1cpp" interactive="activecode" language="cpp">
        <input>
#include &lt;iostream&gt;
using namespace std;

// function that demonstrates logical operators
int main() {
  cout &lt;&lt; true &lt;&lt; endl;
  cout &lt;&lt; false &lt;&lt; endl;
  cout &lt;&lt; (true || false) &lt;&lt; endl;
  cout &lt;&lt; (true &amp;&amp; false) &lt;&lt; endl;
  return 0;
}
        </input>
      </program>
    </TabNode>
    <TabNode tabname="Python" tabnode_options="{'subchapter': 'BooleanData', 'chapter': 'AtomicData', 'basecourse': 'cpp4python', 'optional': '', 'optclass': '', 'tabname': 'Python'}">
      <program xml:id="logical_1py" interactive="activecode" language="python">
        <input>
# Function that demonstrates logical operators.
def main():
    print(True)
    print(False)
    print(True or False)
    print(True and False)
main()
        </input>
      </program>
    </TabNode>
  </exercise>
  <p>Boolean data objects are also used as results for comparison operators
            such as equality (==) and greater than (<m>&gt;</m>). In addition,
            relational operators and logical operators can be combined together to
            form complex logical questions. <xref ref="atomic-data_id1"/> shows the relational
            and logical operators with examples shown in the session that follows.</p>
  <table xml:id="atomic-data_atomic-data_tab-relational">
    <tabular>
      <title>
        <term>Table 1: C++ Relational and Logical Operators</term>
      </title>
      <row header="yes">
        <cell>
          <term>Operation Name</term>
        </cell>
        <cell>
          <term>Operator</term>
        </cell>
        <cell>
          <term>Explanation</term>
        </cell>
      </row>
      <row>
        <cell>
                            less than
                        </cell>
        <cell>
          <m>&lt;</m>
        </cell>
        <cell>
                            Less than operator
                        </cell>
      </row>
      <row>
        <cell>
                            greater than
                        </cell>
        <cell>
          <m>&gt;</m>
        </cell>
        <cell>
                            Greater than operator
                        </cell>
      </row>
      <row>
        <cell>
                            less than or equal
                        </cell>
        <cell>
          <m>&lt;=</m>
        </cell>
        <cell>
                            Less than or equal to operator
                        </cell>
      </row>
      <row>
        <cell>
                            greater than or equal
                        </cell>
        <cell>
          <m>&gt;=</m>
        </cell>
        <cell>
                            Greater than or equal to operator
                        </cell>
      </row>
      <row>
        <cell>
                            equal
                        </cell>
        <cell>
          <m>==</m>
        </cell>
        <cell>
                            Equality operator
                        </cell>
      </row>
      <row>
        <cell>
                            not equal
                        </cell>
        <cell>
          <m>!=</m>
        </cell>
        <cell>
                            Not equal operator
                        </cell>
      </row>
      <row>
        <cell>
                            logical and
                        </cell>
        <cell>
          <m>\&amp;\&amp;</m>
        </cell>
        <cell>
                            Both operands true for result to be true
                        </cell>
      </row>
      <row>
        <cell>
                            logical or
                        </cell>
        <cell>
          <m>||</m>
        </cell>
        <cell>
                            One or the other operand is true for the result to be true
                        </cell>
      </row>
      <row>
        <cell>
                            logical not
                        </cell>
        <cell>
          <m>!</m>
        </cell>
        <cell>
                            Negates the truth value, false becomes true, true becomes false
                        </cell>
      </row>
    </tabular>
  </table>
  <exercise>
    <TabNode tabname="C++" tabnode_options="{'subchapter': 'BooleanData', 'chapter': 'AtomicData', 'basecourse': 'cpp4python', 'optional': '', 'optclass': '', 'tabname': 'C++'}">
      <program xml:id="locicalcpp" interactive="activecode" language="cpp">
        <input>
#include &lt;iostream&gt;
using namespace std;

// function that demonstrates relational operators.
int main(){

    cout &lt;&lt; (5 == 10) &lt;&lt; endl;
    cout &lt;&lt; (10 &gt; 5) &lt;&lt; endl;
    cout &lt;&lt; ((5 &gt;= 1) &amp;&amp; (5 &lt;= 10)) &lt;&lt; endl;

    return 0;
}
        </input>
      </program>
    </TabNode>
    <TabNode tabname="Python" tabnode_options="{'subchapter': 'BooleanData', 'chapter': 'AtomicData', 'basecourse': 'cpp4python', 'optional': '', 'optclass': '', 'tabname': 'Python'}">
      <program xml:id="logicalpy" interactive="activecode" language="python">
        <input>
# Function that demonstrates relational operators.
def main():

    print(5 == 10)
    print(10 &gt; 5)
    print((5 &gt;= 1) and (5 &lt;= 10))

main()
        </input>
      </program>
    </TabNode>
  </exercise>
  <p>When a C++ variable is declared, space in memory is set aside to hold
            this type of value.
            A C++ variable can optionally be initialized in the declaration by
            using a combination of a declaration and an assignment statement.</p>
  <p>Consider the following session:</p>
  <program xml:id="booleanpitfall" interactive="activecode" language="cpp">
    <input>
#include &lt;iostream&gt;
using namespace std;

//  Demonstrates how to use variables in C++
//  moreover, we assign an integer to a boolean variable,
//  showing the static typing of C++.
int main(){

    int theSum = 4;
    cout &lt;&lt; theSum &lt;&lt; endl;

    theSum = theSum + 1;
    cout &lt;&lt; theSum &lt;&lt; endl;

    bool theBool = true;
    cout &lt;&lt; theBool &lt;&lt; endl;

    theBool = 4;
    cout &lt;&lt; theBool &lt;&lt; endl;

    return 0;
}
        </input>
  </program>
  <p>The declaration <c>int theSum = 0;</c> creates a variable called
            <c>theSum</c> and initializes it to hold the data value of <c>0</c>.
            As in Python, the right-hand side of each assignment
            statement is evaluated and the resulting data value is
            <q>assigned</q> to the variable named on the left-hand side.
            Here the type of the variable is integer.
            Because Python is dynamically typed, if the type of the data
            changes in the program, so does the type of the variable.
            However, in C++, the data type cannot change.
            This is a characteristic of C++'s static typing. A
            variable can hold ever only one type of data.
            Pitfall: C++ will often simply try to do the assignment you
            requested without
            complaining. Note what happened in the code above in the final output.</p>
  <exercise label="mc_bool">
    <statement>
      <p>Q-6: Why did theBool output a value of 1 after being set to 4?</p>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>Setting theBool to anything other than true or false is ignored.</p>
        </statement>
        <feedback>
          <p>No. Try changing the code and setting theBool to 0.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>Setting theBool to anything &gt; 0 will be true and false otherwise.</p>
        </statement>
        <feedback>
          <p>No. Try changing the code and setting theBool to -4.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>false == 0 and true = !false i.e. anything that is not zero and can be converted to a Boolean is not false, thus it must be true.</p>
        </statement>
        <feedback>
          <p>Correct!</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>None of the above.</p>
        </statement>
        <feedback>
          <p>Try again. One of the above is correct. You might try changing the code and rerunning.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
</section>
