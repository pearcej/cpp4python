<?xml version="1.0"?>
<section xml:id="functions_function-overloading">
  <title>Function Overloading</title>
  <p><term>Function overloading</term> is the ability to create multiple functions with identical names but different implementations.
            Not all languages support function overloading. Python does not, for example.</p>
  <p>In C++ programming, two or more functions can have same
            name when they can be distinguished by the parameters.
            Hence, C++  allows function overloading when either the data types of the parameters differ
            or the number of parameters differ.</p>
  <p>Overloading is a nice feature of the C++ language.
            Python does not offer function overloading, so accomplishing the same task in
            Python requires a different technique.</p>
  <p>See the following example where an optional parameter is used to accomplish the
            same task.</p>
  <exercise>
    <TabNode tabname="C++" tabnode_options="{'subchapter': 'FunctionOverloading', 'chapter': 'Functions', 'basecourse': 'cpp4python', 'optional': '', 'optclass': '', 'tabname': 'C++'}">
      <program xml:id="foverload_cpp" interactive="activecode" language="cpp">
        <input>
// demonstrates how function overloading works
// by changing the parameters on the inputs.
#include &lt;iostream&gt;
using namespace std;

void myfunct(int n) {
     cout &lt;&lt; "1 parameter: " &lt;&lt; n &lt;&lt;endl;
}

void myfunct(int n, int m) {
     cout &lt;&lt; "2 parameters: " &lt;&lt; n;
     cout &lt;&lt; " and " &lt;&lt; m &lt;&lt;endl;
}

int main() {

    myfunct(4);
    myfunct(5, 6);
    myfunct(100);

    return 0;
}
        </input>
      </program>
    </TabNode>
    <TabNode tabname="Python" tabnode_options="{'subchapter': 'FunctionOverloading', 'chapter': 'Functions', 'basecourse': 'cpp4python', 'optional': '', 'optclass': '', 'tabname': 'Python'}">
      <program xml:id="foverload_py" interactive="activecode" language="python">
        <input>
"""Demonstrates the use of multiple parameters using a single function"""
def myfunct(n, m=None):
    if m is None:
        print("1 parameter: " + str(n))
    else:
        print("2 parameters: " + str(n), end="")
        print(" and ", str(m))

def main():
    myfunct(4);
    myfunct(5, 6);
    myfunct(100);

main()
        </input>
      </program>
    </TabNode>
  </exercise>
  <exercise label="foverloading">
    <statement>
      <p>Q-3: What are benefits of function overloading?</p>
    </statement>
    <choices>
      <choice correct="yes">
        <statement>
          <p>Helps keep consintency in the way your functions are named across your program.</p>
        </statement>
        <feedback>
          <p>Take a look at the other answers as well...</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>Functions that do similar tasks differ based on parameters rather than by name.</p>
        </statement>
        <feedback>
          <p>Take a look at the other answers as well...</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>A function in essence can fulfill multiple tasks depending on the parameters.</p>
        </statement>
        <feedback>
          <p>Take a look at the other answers as well...</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>Removes the limit on how many parameters can be written or passed.</p>
        </statement>
        <feedback>
          <p>Wrong! Function overloading has nothing to do with removing the limit of parameters.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <note>
    <title>Self Check</title>
    <p>Here's a self check that really covers everything so far.  You may have
                heard of the infinite monkey theorem?  The theorem states that a monkey
                hitting keys at random on a typewriter keyboard for an infinite amount of
                time will almost surely type a given text, such as the complete works of
                William Shakespeare.  Well, suppose we replace a monkey with a C++ function.
                How long do you think it would take for a C++ function to generate just one
                sentence of Shakespeare?  The sentence we'll shoot for is:  <q>methinks it is
                like a weasel</q></p>
    <p>You're not going to want to run this one in the browser, so fire up your favorite
                C++ IDE.  The way we'll simulate this is to write a function that generates a string
                that is 28 characters long by choosing random letters from the 26 letters in the
                alphabet plus the space.  We'll write another function that will score each
                generated string by comparing the randomly generated string to the goal.
                Hint: You will need to import the &lt;random&gt; library for this.</p>
    <p>A third function will repeatedly call generate and score, then if 100% of
                the letters are correct we are done.  If the letters are not correct then
                we will generate a whole new string. To make it easier to follow your program's
                progress this third function should print out the best string generated so far
                and its score every 1000 tries.</p>
  </note>
  <note>
    <title>Self Check Challenge</title>
    <p>See if you can improve upon the program in the self check by keeping letters
                that are correct and only modifying one character in the best string so far.
                This is a type of algorithm in the class of &#x2018;hill climbing' algorithms, that
                is we only keep the result if it is better than the previous one.</p>
  </note>
</section>
